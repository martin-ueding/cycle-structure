#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2014 Martin Ueding <dev@martin-ueding.de>

import argparse

def insert_partitions(part, n, i, parts):
    free = n - sum(part)

    if i == n:
        if free != 0:
            return
        parts.append(list(part))
    else:
        max_element = free
        if i != 0:
            max_element = min(max_element, part[i-1])

        for k in reversed(range(max_element + 1)):
            part[i] = k
            insert_partitions(part, n, i + 1, parts)

def partitions(n):
    part = [0]*n
    parts = []

    insert_partitions(part, n, 0, parts)

    return parts

def render_part_long(part):
    return '[' + ', '.join([str(x) for x in part]) + ']'

def render_part_short(part):
    output = []
    output.append('[')
    powers = []
    prev = None
    power = 1

    i = 0
    while i != len(part):
        lambda_ = part[i]
        if lambda_ == 0:
            break
        power = len(list(filter(lambda x: x == lambda_, part)))
        if power == 1:
            powers.append('{}'.format(lambda_))
        else:
            powers.append('{}^{}'.format(lambda_, power))
        i += power
    output += ', '.join(powers)
    output.append(']')

    return ''.join(output)

def render_young_frame(part):
    lines = []
    n = sum(part)
    for lambda_ in part:
        if lambda_ == 0:
            break
        lines.append('#' * lambda_)

    return '\n'.join(lines)

def main():
    options = _parse_args()

    parts = partitions(options.n)

    for part in parts:
        print(render_young_frame(part))
        print()

def _parse_args():
    '''
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    '''
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('n', type=int)
    options = parser.parse_args()

    return options

if __name__ == '__main__':
    main()
